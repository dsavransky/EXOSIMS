from EXOSIMS.Observatory.SotoStarshade_SKi import SotoStarshade_SKi as sss
import unittest
import numpy as np
import astropy.units as u
from scipy.integrate import solve_ivp
import astropy.constants as const
import hashlib
import scipy.optimize as optimize
from scipy.optimize import basinhopping
import scipy.interpolate as interp
import scipy.integrate as intg
from scipy.integrate import solve_bvp
from copy import deepcopy
import time
import os
import pickle


class TestSotoStarshadeSKi(unittest.TestCase):
    """
    Sonny Rappaport, July 2021, Cornell

    This class tests particular methods from SotoStarshade_Ski.

    """

    def test_convertTime_to_dim(self):
        """tests covertTime_to_dim with some trivial inputs, with outputs generated
        via a locally run Jupyter notebook with python"""

        # tests an array of input numbers from 0 to 100

        input = np.linspace(0, 100, num=101)
        output = u.yr * [
            0.0,
            0.15915494309189535,
            0.3183098861837907,
            0.477464829275686,
            0.6366197723675814,
            0.7957747154594768,
            0.954929658551372,
            1.1140846016432675,
            1.2732395447351628,
            1.432394487827058,
            1.5915494309189535,
            1.7507043740108488,
            1.909859317102744,
            2.0690142601946393,
            2.228169203286535,
            2.3873241463784303,
            2.5464790894703255,
            2.705634032562221,
            2.864788975654116,
            3.0239439187460113,
            3.183098861837907,
            3.3422538049298023,
            3.5014087480216975,
            3.660563691113593,
            3.819718634205488,
            3.9788735772973833,
            4.138028520389279,
            4.297183463481174,
            4.45633840657307,
            4.615493349664965,
            4.7746482927568605,
            4.933803235848756,
            5.092958178940651,
            5.252113122032546,
            5.411268065124442,
            5.570423008216337,
            5.729577951308232,
            5.888732894400127,
            6.047887837492023,
            6.207042780583918,
            6.366197723675814,
            6.525352666767709,
            6.684507609859605,
            6.8436625529515,
            7.002817496043395,
            7.16197243913529,
            7.321127382227186,
            7.480282325319081,
            7.639437268410976,
            7.798592211502871,
            7.957747154594767,
            8.116902097686662,
            8.276057040778557,
            8.435211983870452,
            8.594366926962348,
            8.753521870054243,
            8.91267681314614,
            9.071831756238035,
            9.23098669932993,
            9.390141642421826,
            9.549296585513721,
            9.708451528605616,
            9.867606471697512,
            10.026761414789407,
            10.185916357881302,
            10.345071300973197,
            10.504226244065093,
            10.663381187156988,
            10.822536130248883,
            10.981691073340778,
            11.140846016432674,
            11.300000959524569,
            11.459155902616464,
            11.61831084570836,
            11.777465788800255,
            11.93662073189215,
            12.095775674984045,
            12.25493061807594,
            12.414085561167836,
            12.573240504259733,
            12.732395447351628,
            12.891550390443523,
            13.050705333535419,
            13.209860276627314,
            13.36901521971921,
            13.528170162811104,
            13.687325105903,
            13.846480048994895,
            14.00563499208679,
            14.164789935178685,
            14.32394487827058,
            14.483099821362476,
            14.642254764454371,
            14.801409707546267,
            14.960564650638162,
            15.119719593730057,
            15.278874536821952,
            15.438029479913848,
            15.597184423005743,
            15.756339366097638,
            15.915494309189533,
        ]

        np.testing.assert_array_equal(sss.convertTime_to_dim(self, input), output)

    def test_convertPos_to_dim(self):
        """tests convertPos_to_dim with some trivial inputs. Because the canonical
        units are in AU, simply check to see that the input is returned with astropy
        AU units attached.
        """

        # tests that an array of input numbers from 0 to 100 is returned with units
        input = np.linspace(0, 100, num=101)
        np.testing.assert_array_equal(sss.convertPos_to_dim(self, input), input * u.AU)

    def test_convertVel_to_dim(self):
        """tests convertVel_to_dim with some trivial inputs, with outputs generated
        via a locally run Jupyter notebook with python
        Input units: 1/2pi
        """

        # tests that an array of input numbers from 0 to 100 is returned with units
        input = np.linspace(0, 100, num=101)

        output = (
            u.AU
            / u.yr
            * [
                0.0,
                6.283185307179586,
                12.566370614359172,
                18.84955592153876,
                25.132741228718345,
                31.41592653589793,
                37.69911184307752,
                43.982297150257104,
                50.26548245743669,
                56.548667764616276,
                62.83185307179586,
                69.11503837897544,
                75.39822368615503,
                81.68140899333463,
                87.96459430051421,
                94.24777960769379,
                100.53096491487338,
                106.81415022205297,
                113.09733552923255,
                119.38052083641213,
                125.66370614359172,
                131.94689145077132,
                138.23007675795088,
                144.51326206513048,
                150.79644737231007,
                157.07963267948966,
                163.36281798666926,
                169.64600329384882,
                175.92918860102841,
                182.212373908208,
                188.49555921538757,
                194.77874452256717,
                201.06192982974676,
                207.34511513692635,
                213.62830044410595,
                219.9114857512855,
                226.1946710584651,
                232.4778563656447,
                238.76104167282426,
                245.04422698000386,
                251.32741228718345,
                257.610597594363,
                263.89378290154264,
                270.1769682087222,
                276.46015351590177,
                282.7433388230814,
                289.02652413026095,
                295.3097094374406,
                301.59289474462014,
                307.8760800517997,
                314.1592653589793,
                320.4424506661589,
                326.7256359733385,
                333.0088212805181,
                339.29200658769764,
                345.57519189487726,
                351.85837720205683,
                358.1415625092364,
                364.424747816416,
                370.7079331235956,
                376.99111843077515,
                383.27430373795477,
                389.55748904513433,
                395.84067435231395,
                402.1238596594935,
                408.4070449666731,
                414.6902302738527,
                420.97341558103227,
                427.2566008882119,
                433.53978619539146,
                439.822971502571,
                446.10615680975064,
                452.3893421169302,
                458.6725274241098,
                464.9557127312894,
                471.23889803846896,
                477.5220833456485,
                483.80526865282815,
                490.0884539600077,
                496.37163926718733,
                502.6548245743669,
                508.93800988154646,
                515.221195188726,
                521.5043804959057,
                527.7875658030853,
                534.0707511102648,
                540.3539364174444,
                546.637121724624,
                552.9203070318035,
                559.2034923389832,
                565.4866776461628,
                571.7698629533423,
                578.0530482605219,
                584.3362335677015,
                590.6194188748811,
                596.9026041820607,
                603.1857894892403,
                609.4689747964198,
                615.7521601035994,
                622.0353454107791,
                628.3185307179587,
            ]
        )

        np.testing.assert_array_equal(sss.convertVel_to_dim(self, input), output)

    def test_convertAngVel_to_canonical(self):
        """tests convertAngVel_to_canonical with some trivial inputs,
        with outputs generated via a locally run Jupyter notebook with python
        """

        # tests that an array of input numbers in rad/yr from 0 to 100 is returned in
        # canonical units

        input = u.rad / u.yr * np.linspace(0, 100, num=101)

        output = [
            0.0,
            0.15915494309189535,
            0.3183098861837907,
            0.477464829275686,
            0.6366197723675814,
            0.7957747154594768,
            0.954929658551372,
            1.1140846016432675,
            1.2732395447351628,
            1.432394487827058,
            1.5915494309189535,
            1.7507043740108488,
            1.909859317102744,
            2.0690142601946393,
            2.228169203286535,
            2.3873241463784303,
            2.5464790894703255,
            2.705634032562221,
            2.864788975654116,
            3.0239439187460113,
            3.183098861837907,
            3.3422538049298023,
            3.5014087480216975,
            3.660563691113593,
            3.819718634205488,
            3.9788735772973833,
            4.138028520389279,
            4.297183463481174,
            4.45633840657307,
            4.615493349664965,
            4.7746482927568605,
            4.933803235848756,
            5.092958178940651,
            5.252113122032546,
            5.411268065124442,
            5.570423008216337,
            5.729577951308232,
            5.888732894400127,
            6.047887837492023,
            6.207042780583918,
            6.366197723675814,
            6.525352666767709,
            6.684507609859605,
            6.8436625529515,
            7.002817496043395,
            7.16197243913529,
            7.321127382227186,
            7.480282325319081,
            7.639437268410976,
            7.798592211502871,
            7.957747154594767,
            8.116902097686662,
            8.276057040778557,
            8.435211983870452,
            8.594366926962348,
            8.753521870054243,
            8.91267681314614,
            9.071831756238035,
            9.23098669932993,
            9.390141642421826,
            9.549296585513721,
            9.708451528605616,
            9.867606471697512,
            10.026761414789407,
            10.185916357881302,
            10.345071300973197,
            10.504226244065093,
            10.663381187156988,
            10.822536130248883,
            10.981691073340778,
            11.140846016432674,
            11.300000959524569,
            11.459155902616464,
            11.61831084570836,
            11.777465788800255,
            11.93662073189215,
            12.095775674984045,
            12.25493061807594,
            12.414085561167836,
            12.573240504259733,
            12.732395447351628,
            12.891550390443523,
            13.050705333535419,
            13.209860276627314,
            13.36901521971921,
            13.528170162811104,
            13.687325105903,
            13.846480048994895,
            14.00563499208679,
            14.164789935178685,
            14.32394487827058,
            14.483099821362476,
            14.642254764454371,
            14.801409707546267,
            14.960564650638162,
            15.119719593730057,
            15.278874536821952,
            15.438029479913848,
            15.597184423005743,
            15.756339366097638,
            15.915494309189533,
        ]
        np.testing.assert_array_equal(
            sss.convertAngVel_to_canonical(self, input), output
        )

        # tests the same as above, except the input is in degree/yr

        input = u.deg / u.yr * np.linspace(0, 100, num=101)

        output = [
            0.0,
            0.002777777777777778,
            0.005555555555555556,
            0.008333333333333333,
            0.011111111111111112,
            0.013888888888888888,
            0.016666666666666666,
            0.019444444444444445,
            0.022222222222222223,
            0.025,
            0.027777777777777776,
            0.030555555555555555,
            0.03333333333333333,
            0.03611111111111111,
            0.03888888888888889,
            0.041666666666666664,
            0.044444444444444446,
            0.04722222222222222,
            0.05,
            0.05277777777777778,
            0.05555555555555555,
            0.058333333333333334,
            0.06111111111111111,
            0.06388888888888888,
            0.06666666666666667,
            0.06944444444444445,
            0.07222222222222222,
            0.075,
            0.07777777777777778,
            0.08055555555555556,
            0.08333333333333333,
            0.08611111111111111,
            0.08888888888888889,
            0.09166666666666666,
            0.09444444444444444,
            0.09722222222222222,
            0.1,
            0.10277777777777777,
            0.10555555555555556,
            0.10833333333333334,
            0.1111111111111111,
            0.11388888888888889,
            0.11666666666666667,
            0.11944444444444445,
            0.12222222222222222,
            0.125,
            0.12777777777777777,
            0.13055555555555556,
            0.13333333333333333,
            0.1361111111111111,
            0.1388888888888889,
            0.14166666666666666,
            0.14444444444444443,
            0.14722222222222223,
            0.15,
            0.1527777777777778,
            0.15555555555555556,
            0.15833333333333333,
            0.16111111111111112,
            0.1638888888888889,
            0.16666666666666666,
            0.16944444444444445,
            0.17222222222222222,
            0.175,
            0.17777777777777778,
            0.18055555555555555,
            0.18333333333333332,
            0.18611111111111112,
            0.18888888888888888,
            0.19166666666666668,
            0.19444444444444445,
            0.19722222222222222,
            0.2,
            0.20277777777777778,
            0.20555555555555555,
            0.20833333333333334,
            0.2111111111111111,
            0.21388888888888888,
            0.21666666666666667,
            0.21944444444444444,
            0.2222222222222222,
            0.225,
            0.22777777777777777,
            0.23055555555555557,
            0.23333333333333334,
            0.2361111111111111,
            0.2388888888888889,
            0.24166666666666667,
            0.24444444444444444,
            0.24722222222222223,
            0.25,
            0.25277777777777777,
            0.25555555555555554,
            0.25833333333333336,
            0.2611111111111111,
            0.2638888888888889,
            0.26666666666666666,
            0.26944444444444443,
            0.2722222222222222,
            0.275,
            0.2777777777777778,
        ]

        np.testing.assert_allclose(sss.convertAngVel_to_canonical(self, input), output)

    def test_convertAngAcc_to_canonical(self):
        """tests convertAngAcc_to_canonical with some trivial inputs,
        with outputs generated via a locally run Jupyter notebook with python
        """

        # tests that an array of input numbers in rad/yr^2 from 0 to 100 is returned in
        # canonical units

        input = u.rad / (u.yr) ** 2 * np.linspace(0, 100, num=101)

        output = [
            0.0,
            0.025330295910584444,
            0.05066059182116889,
            0.07599088773175333,
            0.10132118364233778,
            0.12665147955292222,
            0.15198177546350666,
            0.1773120713740911,
            0.20264236728467555,
            0.22797266319526,
            0.25330295910584444,
            0.2786332550164289,
            0.3039635509270133,
            0.32929384683759777,
            0.3546241427481822,
            0.37995443865876666,
            0.4052847345693511,
            0.43061503047993555,
            0.45594532639052,
            0.48127562230110443,
            0.5066059182116889,
            0.5319362141222733,
            0.5572665100328578,
            0.5825968059434422,
            0.6079271018540267,
            0.6332573977646111,
            0.6585876936751955,
            0.68391798958578,
            0.7092482854963644,
            0.7345785814069489,
            0.7599088773175333,
            0.7852391732281178,
            0.8105694691387022,
            0.8358997650492866,
            0.8612300609598711,
            0.8865603568704555,
            0.91189065278104,
            0.9372209486916244,
            0.9625512446022089,
            0.9878815405127933,
            1.0132118364233778,
            1.0385421323339623,
            1.0638724282445466,
            1.0892027241551312,
            1.1145330200657155,
            1.1398633159763,
            1.1651936118868844,
            1.190523907797469,
            1.2158542037080533,
            1.2411844996186379,
            1.2665147955292222,
            1.2918450914398067,
            1.317175387350391,
            1.3425056832609756,
            1.36783597917156,
            1.3931662750821445,
            1.4184965709927289,
            1.4438268669033134,
            1.4691571628138977,
            1.4944874587244823,
            1.5198177546350666,
            1.5451480505456512,
            1.5704783464562355,
            1.59580864236682,
            1.6211389382774044,
            1.646469234187989,
            1.6717995300985733,
            1.6971298260091578,
            1.7224601219197422,
            1.7477904178303267,
            1.773120713740911,
            1.7984510096514956,
            1.82378130556208,
            1.8491116014726645,
            1.8744418973832488,
            1.8997721932938334,
            1.9251024892044177,
            1.9504327851150023,
            1.9757630810255866,
            2.001093376936171,
            2.0264236728467555,
            2.05175396875734,
            2.0770842646679246,
            2.102414560578509,
            2.1277448564890933,
            2.1530751523996776,
            2.1784054483102624,
            2.2037357442208467,
            2.229066040131431,
            2.2543963360420154,
            2.2797266319526,
            2.3050569278631845,
            2.330387223773769,
            2.355717519684353,
            2.381047815594938,
            2.4063781115055223,
            2.4317084074161066,
            2.457038703326691,
            2.4823689992372757,
            2.50769929514786,
            2.5330295910584444,
        ]
        np.testing.assert_array_equal(
            sss.convertAngAcc_to_canonical(self, input), output
        )

        # tests the same as above, except the input is in degree/yr^2

        input = u.deg / (u.yr) ** 2 * np.linspace(0, 100, num=101)

        output = [
            0.0,
            0.0004420970641441537,
            0.0008841941282883074,
            0.001326291192432461,
            0.0017683882565766149,
            0.0022104853207207684,
            0.002652582384864922,
            0.003094679449009076,
            0.0035367765131532297,
            0.0039788735772973835,
            0.004420970641441537,
            0.004863067705585691,
            0.005305164769729844,
            0.0057472618338739985,
            0.006189358898018152,
            0.006631455962162306,
            0.007073553026306459,
            0.007515650090450614,
            0.007957747154594767,
            0.008399844218738921,
            0.008841941282883074,
            0.009284038347027228,
            0.009726135411171382,
            0.010168232475315536,
            0.010610329539459689,
            0.011052426603603843,
            0.011494523667747997,
            0.01193662073189215,
            0.012378717796036304,
            0.012820814860180458,
            0.013262911924324612,
            0.013705008988468765,
            0.014147106052612919,
            0.014589203116757073,
            0.015031300180901227,
            0.01547339724504538,
            0.015915494309189534,
            0.016357591373333688,
            0.016799688437477842,
            0.017241785501621996,
            0.017683882565766147,
            0.0181259796299103,
            0.018568076694054456,
            0.01901017375819861,
            0.019452270822342764,
            0.019894367886486918,
            0.020336464950631072,
            0.020778562014775223,
            0.021220659078919377,
            0.02166275614306353,
            0.022104853207207686,
            0.02254695027135184,
            0.022989047335495994,
            0.02343114439964015,
            0.0238732414637843,
            0.024315338527928453,
            0.024757435592072607,
            0.02519953265621676,
            0.025641629720360916,
            0.02608372678450507,
            0.026525823848649224,
            0.026967920912793375,
            0.02741001797693753,
            0.027852115041081683,
            0.028294212105225838,
            0.028736309169369992,
            0.029178406233514146,
            0.0296205032976583,
            0.030062600361802454,
            0.030504697425946605,
            0.03094679449009076,
            0.03138889155423492,
            0.03183098861837907,
            0.03227308568252322,
            0.032715182746667376,
            0.03315727981081153,
            0.033599376874955685,
            0.034041473939099835,
            0.03448357100324399,
            0.034925668067388144,
            0.035367765131532294,
            0.03580986219567645,
            0.0362519592598206,
            0.03669405632396476,
            0.03713615338810891,
            0.03757825045225307,
            0.03802034751639722,
            0.03846244458054137,
            0.03890454164468553,
            0.03934663870882968,
            0.039788735772973836,
            0.04023083283711799,
            0.040672929901262145,
            0.041115026965406296,
            0.041557124029550446,
            0.041999221093694604,
            0.042441318157838755,
            0.04288341522198291,
            0.04332551228612706,
            0.04376760935027122,
            0.04420970641441537,
        ]
        np.testing.assert_allclose(sss.convertAngAcc_to_canonical(self, input), output)

    def test_convertAcc_to_canonical(self):
        """tests convertAngAcc_to_canonical with some trivial inputs,
        with outputs generated via a locally run Jupyter notebook with python
        """

        # tests that an array of input numbers in AU/yr^2 is returned in canonical units
        input = u.AU / (u.yr) ** 2 * np.linspace(0, 100, num=101)

        output = [
            0.0,
            0.025330295910584444,
            0.05066059182116889,
            0.07599088773175333,
            0.10132118364233778,
            0.12665147955292222,
            0.15198177546350666,
            0.1773120713740911,
            0.20264236728467555,
            0.22797266319526,
            0.25330295910584444,
            0.2786332550164289,
            0.3039635509270133,
            0.32929384683759777,
            0.3546241427481822,
            0.37995443865876666,
            0.4052847345693511,
            0.43061503047993555,
            0.45594532639052,
            0.48127562230110443,
            0.5066059182116889,
            0.5319362141222733,
            0.5572665100328578,
            0.5825968059434422,
            0.6079271018540267,
            0.6332573977646111,
            0.6585876936751955,
            0.68391798958578,
            0.7092482854963644,
            0.7345785814069489,
            0.7599088773175333,
            0.7852391732281178,
            0.8105694691387022,
            0.8358997650492866,
            0.8612300609598711,
            0.8865603568704555,
            0.91189065278104,
            0.9372209486916244,
            0.9625512446022089,
            0.9878815405127933,
            1.0132118364233778,
            1.0385421323339623,
            1.0638724282445466,
            1.0892027241551312,
            1.1145330200657155,
            1.1398633159763,
            1.1651936118868844,
            1.190523907797469,
            1.2158542037080533,
            1.2411844996186379,
            1.2665147955292222,
            1.2918450914398067,
            1.317175387350391,
            1.3425056832609756,
            1.36783597917156,
            1.3931662750821445,
            1.4184965709927289,
            1.4438268669033134,
            1.4691571628138977,
            1.4944874587244823,
            1.5198177546350666,
            1.5451480505456512,
            1.5704783464562355,
            1.59580864236682,
            1.6211389382774044,
            1.646469234187989,
            1.6717995300985733,
            1.6971298260091578,
            1.7224601219197422,
            1.7477904178303267,
            1.773120713740911,
            1.7984510096514956,
            1.82378130556208,
            1.8491116014726645,
            1.8744418973832488,
            1.8997721932938334,
            1.9251024892044177,
            1.9504327851150023,
            1.9757630810255866,
            2.001093376936171,
            2.0264236728467555,
            2.05175396875734,
            2.0770842646679246,
            2.102414560578509,
            2.1277448564890933,
            2.1530751523996776,
            2.1784054483102624,
            2.2037357442208467,
            2.229066040131431,
            2.2543963360420154,
            2.2797266319526,
            2.3050569278631845,
            2.330387223773769,
            2.355717519684353,
            2.381047815594938,
            2.4063781115055223,
            2.4317084074161066,
            2.457038703326691,
            2.4823689992372757,
            2.50769929514786,
            2.5330295910584444,
        ]

        np.testing.assert_array_equal(sss.convertAcc_to_canonical(self, input), output)

        # tests that an array of input numbers in meters/yr^2 is returned in canonical units

        input = u.m / (u.yr) ** 2 * np.linspace(0, 100, num=101)

        output = [
            0.0,
            1.6932256985732852e-13,
            3.3864513971465704e-13,
            5.079677095719855e-13,
            6.772902794293141e-13,
            8.466128492866425e-13,
            1.015935419143971e-12,
            1.1852579890012997e-12,
            1.3545805588586282e-12,
            1.5239031287159566e-12,
            1.693225698573285e-12,
            1.8625482684306138e-12,
            2.031870838287942e-12,
            2.2011934081452707e-12,
            2.3705159780025994e-12,
            2.5398385478599276e-12,
            2.7091611177172563e-12,
            2.8784836875745846e-12,
            3.0478062574319132e-12,
            3.217128827289242e-12,
            3.38645139714657e-12,
            3.555773967003899e-12,
            3.7250965368612275e-12,
            3.894419106718556e-12,
            4.063741676575884e-12,
            4.233064246433213e-12,
            4.402386816290541e-12,
            4.57170938614787e-12,
            4.741031956005199e-12,
            4.9103545258625266e-12,
            5.079677095719855e-12,
            5.248999665577184e-12,
            5.418322235434513e-12,
            5.587644805291841e-12,
            5.756967375149169e-12,
            5.926289945006498e-12,
            6.0956125148638265e-12,
            6.264935084721155e-12,
            6.434257654578484e-12,
            6.603580224435812e-12,
            6.77290279429314e-12,
            6.942225364150469e-12,
            7.111547934007798e-12,
            7.280870503865126e-12,
            7.450193073722455e-12,
            7.619515643579783e-12,
            7.788838213437112e-12,
            7.95816078329444e-12,
            8.127483353151768e-12,
            8.296805923009098e-12,
            8.466128492866425e-12,
            8.635451062723755e-12,
            8.804773632581083e-12,
            8.97409620243841e-12,
            9.14341877229574e-12,
            9.312741342153068e-12,
            9.482063912010397e-12,
            9.651386481867725e-12,
            9.820709051725053e-12,
            9.990031621582383e-12,
            1.015935419143971e-11,
            1.032867676129704e-11,
            1.0497999331154368e-11,
            1.0667321901011696e-11,
            1.0836644470869025e-11,
            1.1005967040726353e-11,
            1.1175289610583683e-11,
            1.134461218044101e-11,
            1.1513934750298338e-11,
            1.1683257320155668e-11,
            1.1852579890012996e-11,
            1.2021902459870325e-11,
            1.2191225029727653e-11,
            1.2360547599584981e-11,
            1.252987016944231e-11,
            1.2699192739299638e-11,
            1.2868515309156968e-11,
            1.3037837879014295e-11,
            1.3207160448871623e-11,
            1.3376483018728953e-11,
            1.354580558858628e-11,
            1.371512815844361e-11,
            1.3884450728300938e-11,
            1.4053773298158266e-11,
            1.4223095868015595e-11,
            1.4392418437872923e-11,
            1.456174100773025e-11,
            1.473106357758758e-11,
            1.490038614744491e-11,
            1.5069708717302236e-11,
            1.5239031287159566e-11,
            1.5408353857016895e-11,
            1.5577676426874225e-11,
            1.574699899673155e-11,
            1.591632156658888e-11,
            1.608564413644621e-11,
            1.6254966706303536e-11,
            1.6424289276160866e-11,
            1.6593611846018195e-11,
            1.676293441587552e-11,
            1.693225698573285e-11,
        ]

        np.testing.assert_allclose(sss.convertAcc_to_canonical(self, input), output)

    def test_convertAngAcc_to_dim(self):
        """tests convertAngAcc_to_canonical with some trivial inputs,
        with outputs generated via a locally run Jupyter notebook with python
        """

        # tests that an array of input numbers is returned in au/yr^2

        input = np.linspace(0, 100, num=101)

        output = (
            u.rad
            / (u.yr) ** 2
            * [
                0.0,
                39.47841760435743,
                78.95683520871486,
                118.4352528130723,
                157.91367041742973,
                197.39208802178717,
                236.8705056261446,
                276.348923230502,
                315.82734083485946,
                355.3057584392169,
                394.78417604357435,
                434.26259364793174,
                473.7410112522892,
                513.2194288566466,
                552.697846461004,
                592.1762640653615,
                631.6546816697189,
                671.1330992740764,
                710.6115168784338,
                750.0899344827913,
                789.5683520871487,
                829.046769691506,
                868.5251872958635,
                908.0036049002209,
                947.4820225045784,
                986.9604401089358,
                1026.4388577132931,
                1065.9172753176506,
                1105.395692922008,
                1144.8741105263655,
                1184.352528130723,
                1223.8309457350804,
                1263.3093633394378,
                1302.7877809437953,
                1342.2661985481527,
                1381.7446161525102,
                1421.2230337568676,
                1460.701451361225,
                1500.1798689655825,
                1539.65828656994,
                1579.1367041742974,
                1618.6151217786546,
                1658.093539383012,
                1697.5719569873695,
                1737.050374591727,
                1776.5287921960844,
                1816.0072098004418,
                1855.4856274047993,
                1894.9640450091567,
                1934.4424626135142,
                1973.9208802178716,
                2013.399297822229,
                2052.8777154265863,
                2092.356133030944,
                2131.834550635301,
                2171.312968239659,
                2210.791385844016,
                2250.2698034483738,
                2289.748221052731,
                2329.2266386570886,
                2368.705056261446,
                2408.1834738658035,
                2447.6618914701608,
                2487.1403090745184,
                2526.6187266788756,
                2566.097144283233,
                2605.5755618875905,
                2645.0539794919478,
                2684.5323970963054,
                2724.0108147006626,
                2763.4892323050203,
                2802.9676499093775,
                2842.446067513735,
                2881.9244851180924,
                2921.40290272245,
                2960.8813203268073,
                3000.359737931165,
                3039.838155535522,
                3079.31657313988,
                3118.794990744237,
                3158.273408348595,
                3197.751825952952,
                3237.230243557309,
                3276.708661161667,
                3316.187078766024,
                3355.665496370382,
                3395.143913974739,
                3434.6223315790967,
                3474.100749183454,
                3513.5791667878116,
                3553.057584392169,
                3592.5360019965265,
                3632.0144196008837,
                3671.4928372052414,
                3710.9712548095986,
                3750.4496724139563,
                3789.9280900183135,
                3829.4065076226707,
                3868.8849252270284,
                3908.3633428313856,
                3947.8417604357433,
            ]
        )

        np.testing.assert_allclose(sss.convertAngAcc_to_dim(self, input), output)

    def test_convertAngVel_to_dim(self):
        """tests convertAngVel_to_dim with some trivial inputs, with outputs generated
        via a locally run Jupyter notebook with python
        Input units: 1/2pi
        """

        # tests that an array of input numbers from 0 to 100 is returned with units
        input = np.linspace(0, 100, num=101)

        output = (
            u.rad
            / u.yr
            * [
                0.0,
                6.283185307179586,
                12.566370614359172,
                18.84955592153876,
                25.132741228718345,
                31.41592653589793,
                37.69911184307752,
                43.982297150257104,
                50.26548245743669,
                56.548667764616276,
                62.83185307179586,
                69.11503837897544,
                75.39822368615503,
                81.68140899333463,
                87.96459430051421,
                94.24777960769379,
                100.53096491487338,
                106.81415022205297,
                113.09733552923255,
                119.38052083641213,
                125.66370614359172,
                131.94689145077132,
                138.23007675795088,
                144.51326206513048,
                150.79644737231007,
                157.07963267948966,
                163.36281798666926,
                169.64600329384882,
                175.92918860102841,
                182.212373908208,
                188.49555921538757,
                194.77874452256717,
                201.06192982974676,
                207.34511513692635,
                213.62830044410595,
                219.9114857512855,
                226.1946710584651,
                232.4778563656447,
                238.76104167282426,
                245.04422698000386,
                251.32741228718345,
                257.610597594363,
                263.89378290154264,
                270.1769682087222,
                276.46015351590177,
                282.7433388230814,
                289.02652413026095,
                295.3097094374406,
                301.59289474462014,
                307.8760800517997,
                314.1592653589793,
                320.4424506661589,
                326.7256359733385,
                333.0088212805181,
                339.29200658769764,
                345.57519189487726,
                351.85837720205683,
                358.1415625092364,
                364.424747816416,
                370.7079331235956,
                376.99111843077515,
                383.27430373795477,
                389.55748904513433,
                395.84067435231395,
                402.1238596594935,
                408.4070449666731,
                414.6902302738527,
                420.97341558103227,
                427.2566008882119,
                433.53978619539146,
                439.822971502571,
                446.10615680975064,
                452.3893421169302,
                458.6725274241098,
                464.9557127312894,
                471.23889803846896,
                477.5220833456485,
                483.80526865282815,
                490.0884539600077,
                496.37163926718733,
                502.6548245743669,
                508.93800988154646,
                515.221195188726,
                521.5043804959057,
                527.7875658030853,
                534.0707511102648,
                540.3539364174444,
                546.637121724624,
                552.9203070318035,
                559.2034923389832,
                565.4866776461628,
                571.7698629533423,
                578.0530482605219,
                584.3362335677015,
                590.6194188748811,
                596.9026041820607,
                603.1857894892403,
                609.4689747964198,
                615.7521601035994,
                622.0353454107791,
                628.3185307179587,
            ]
        )

        np.testing.assert_array_equal(sss.convertAngVel_to_dim(self, input), output)

    def test_convertAngVel_to_dim(self):
        """tests convertAngVel_to_dim with some trivial inputs, with outputs generated
        via a locally run Jupyter notebook with python
        Input units: 1/2pi
        """

        # tests that an array of input numbers from 0 to 100 is returned with units
        input = np.linspace(0, 100, num=101)

        output = (
            u.rad
            / u.yr
            * [
                0.0,
                6.283185307179586,
                12.566370614359172,
                18.84955592153876,
                25.132741228718345,
                31.41592653589793,
                37.69911184307752,
                43.982297150257104,
                50.26548245743669,
                56.548667764616276,
                62.83185307179586,
                69.11503837897544,
                75.39822368615503,
                81.68140899333463,
                87.96459430051421,
                94.24777960769379,
                100.53096491487338,
                106.81415022205297,
                113.09733552923255,
                119.38052083641213,
                125.66370614359172,
                131.94689145077132,
                138.23007675795088,
                144.51326206513048,
                150.79644737231007,
                157.07963267948966,
                163.36281798666926,
                169.64600329384882,
                175.92918860102841,
                182.212373908208,
                188.49555921538757,
                194.77874452256717,
                201.06192982974676,
                207.34511513692635,
                213.62830044410595,
                219.9114857512855,
                226.1946710584651,
                232.4778563656447,
                238.76104167282426,
                245.04422698000386,
                251.32741228718345,
                257.610597594363,
                263.89378290154264,
                270.1769682087222,
                276.46015351590177,
                282.7433388230814,
                289.02652413026095,
                295.3097094374406,
                301.59289474462014,
                307.8760800517997,
                314.1592653589793,
                320.4424506661589,
                326.7256359733385,
                333.0088212805181,
                339.29200658769764,
                345.57519189487726,
                351.85837720205683,
                358.1415625092364,
                364.424747816416,
                370.7079331235956,
                376.99111843077515,
                383.27430373795477,
                389.55748904513433,
                395.84067435231395,
                402.1238596594935,
                408.4070449666731,
                414.6902302738527,
                420.97341558103227,
                427.2566008882119,
                433.53978619539146,
                439.822971502571,
                446.10615680975064,
                452.3893421169302,
                458.6725274241098,
                464.9557127312894,
                471.23889803846896,
                477.5220833456485,
                483.80526865282815,
                490.0884539600077,
                496.37163926718733,
                502.6548245743669,
                508.93800988154646,
                515.221195188726,
                521.5043804959057,
                527.7875658030853,
                534.0707511102648,
                540.3539364174444,
                546.637121724624,
                552.9203070318035,
                559.2034923389832,
                565.4866776461628,
                571.7698629533423,
                578.0530482605219,
                584.3362335677015,
                590.6194188748811,
                596.9026041820607,
                603.1857894892403,
                609.4689747964198,
                615.7521601035994,
                622.0353454107791,
                628.3185307179587,
            ]
        )

        np.testing.assert_array_equal(sss.convertAngVel_to_dim(self, input), output)

    def test_convertAcc_to_dim(self):
        """tests convertAcc_to_dim with some trivial inputs, with outputs generated
        via a locally run Jupyter notebook with python"""

        # tests an array of input numbers from 0 to 100

        input = np.linspace(0, 100, num=101)
        output = (
            u.AU
            / (u.yr) ** 2
            * [
                0.0,
                39.47841760435743,
                78.95683520871486,
                118.4352528130723,
                157.91367041742973,
                197.39208802178717,
                236.8705056261446,
                276.348923230502,
                315.82734083485946,
                355.3057584392169,
                394.78417604357435,
                434.26259364793174,
                473.7410112522892,
                513.2194288566466,
                552.697846461004,
                592.1762640653615,
                631.6546816697189,
                671.1330992740764,
                710.6115168784338,
                750.0899344827913,
                789.5683520871487,
                829.046769691506,
                868.5251872958635,
                908.0036049002209,
                947.4820225045784,
                986.9604401089358,
                1026.4388577132931,
                1065.9172753176506,
                1105.395692922008,
                1144.8741105263655,
                1184.352528130723,
                1223.8309457350804,
                1263.3093633394378,
                1302.7877809437953,
                1342.2661985481527,
                1381.7446161525102,
                1421.2230337568676,
                1460.701451361225,
                1500.1798689655825,
                1539.65828656994,
                1579.1367041742974,
                1618.6151217786546,
                1658.093539383012,
                1697.5719569873695,
                1737.050374591727,
                1776.5287921960844,
                1816.0072098004418,
                1855.4856274047993,
                1894.9640450091567,
                1934.4424626135142,
                1973.9208802178716,
                2013.399297822229,
                2052.8777154265863,
                2092.356133030944,
                2131.834550635301,
                2171.312968239659,
                2210.791385844016,
                2250.2698034483738,
                2289.748221052731,
                2329.2266386570886,
                2368.705056261446,
                2408.1834738658035,
                2447.6618914701608,
                2487.1403090745184,
                2526.6187266788756,
                2566.097144283233,
                2605.5755618875905,
                2645.0539794919478,
                2684.5323970963054,
                2724.0108147006626,
                2763.4892323050203,
                2802.9676499093775,
                2842.446067513735,
                2881.9244851180924,
                2921.40290272245,
                2960.8813203268073,
                3000.359737931165,
                3039.838155535522,
                3079.31657313988,
                3118.794990744237,
                3158.273408348595,
                3197.751825952952,
                3237.230243557309,
                3276.708661161667,
                3316.187078766024,
                3355.665496370382,
                3395.143913974739,
                3434.6223315790967,
                3474.100749183454,
                3513.5791667878116,
                3553.057584392169,
                3592.5360019965265,
                3632.0144196008837,
                3671.4928372052414,
                3710.9712548095986,
                3750.4496724139563,
                3789.9280900183135,
                3829.4065076226707,
                3868.8849252270284,
                3908.3633428313856,
                3947.8417604357433,
            ]
        )

        np.testing.assert_array_equal(sss.convertAcc_to_dim(self, input), output)

    def test_unitVector(self):
        """
        tests unitVector with some trivial inputs, with outputs generated via
        a locally run Jupyter notebook with python
        """

        # test that a simple [1,0,0] returns as itself with a norm of 1

        expected = np.reshape([1, 0, 0], (3, 1))

        output = sss.unitVector(self, expected)

        np.testing.assert_array_equal(output[0], expected)
        np.testing.assert_array_equal(output[1], np.array([1]))

        # test that [4,4,4] returns as:
        # [0.5773502691896258,0.5773502691896258,0.5773502691896258]
        # with norm 6.928203230275509

        output = sss.unitVector(self, np.reshape([4, 4, 4], (3, 1)))

        a = 0.5773502691896258
        norm = 6.928203230275509

        np.testing.assert_array_equal(output[0], np.reshape([a, a, a], (3, 1)))
        np.testing.assert_array_equal(output[1], np.array([norm]))

        # #test that [[1,0,0],[4,4,4]] returns both of the previous results

        input = np.array([[1, 0, 0], [4, 4, 4]]).transpose()
        output = sss.unitVector(self, input)

        np.testing.assert_array_equal(
            output[0], np.array([[1, 0, 0], [a, a, a]]).transpose()
        )
        np.testing.assert_array_equal(output[1], np.array([1, norm]))

        # test that input [[1,2,3],[4,5,6],[7,8,9]]
        # returns the appropriate 3x3 matrix

        vec1 = [1, 2, 3]
        norm1 = np.linalg.norm(vec1)
        unit1 = vec1 / norm1

        vec2 = [4, 5, 6]
        norm2 = np.linalg.norm(vec2)
        unit2 = vec2 / norm2

        vec3 = [7, 8, 9]
        norm3 = np.linalg.norm(vec3)
        unit3 = vec3 / norm3

        output = sss.unitVector(self, (np.array([vec1, vec2, vec3]).transpose()))

        np.testing.assert_array_equal(
            output[0], np.array([unit1, unit2, unit3]).transpose()
        )
        np.testing.assert_array_equal(output[1], [norm1, norm2, norm3])
