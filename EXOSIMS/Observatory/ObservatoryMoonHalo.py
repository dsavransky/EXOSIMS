from EXOSIMS.Observatory.ObservatoryL2Halo import ObservatoryL2Halo
import astropy.units as u
from astropy.time import Time
import numpy as np
import os
import inspect
import scipy.interpolate as interpolate
import scipy.integrate as itg
import pickle
from scipy.io import loadmat


class ObservatoryMoonHalo(Observatory):
    """Observatory at L2 implementation.
    The orbit method from the Observatory prototype is overloaded to implement
    a space telescope on a halo orbit about the Sun-Earth L2 point. This class

    Orbit is stored in pickled dictionary on disk (generated by MATLAB
    code adapted from E. Kolemen (2008).  Describes approx. 6 month halo
    which is then patched for the entire mission duration).

    """

    def __init__(self, equinox=60575.25, haloStartTime=0, orbit_datapath=None, **specs):

        # run prototype constructor __init__
        ObservatoryL2Halo.__init__(self, **specs)
        self.SRP = SRP
        
        # find and load halo orbit data in heliocentric ecliptic frame
        if orbit_datapath is None:
            self.vprint('    orbitdatapath none')
            filename = str(self.orbit_filename)+'.p'
            orbit_datapath = os.path.join(self.cachedir, filename)
            
        if os.path.exists(orbit_datapath):
            self.vprint('    orbitdatapath exists')
            try:
                with open(orbit_datapath, "rb") as ff:
                    halo = pickle.load(ff)
            except UnicodeDecodeError:
                with open(orbit_datapath, "rb") as ff:
                    halo = pickle.load(ff,encoding='latin1')
            try:
                for x in keysHalo: halo[x]
            except:
                self.vprint("Relevant keys not found, updating pickle file.")
                needToUpdate = True
            
        if not os.path.exists(orbit_datapath) or needToUpdate:
            self.vprint('    orbitdatapath need to update')
            orbit_datapath = os.path.join(self.cachedir, filename)
            matname = str(self.orbit_filename)+'.mat'
            classpath = os.path.split(inspect.getfile(self.__class__))[0]
            mat_datapath = os.path.join(classpath, matname)
            if not os.path.exists(mat_datapath):
                raise Exception("Orbit data file not found.")
            else:
                halo = loadmat(mat_datapath)
                with open(orbit_datapath, 'wb') as ff:
                    pickle.dump(halo, ff)
        self.vprint(orbit_datapath)
        
        # unpack orbit properties in heliocentric ecliptic frame
        # position wrt EM barycenter, approximate as wrt Earth
        self.mu = halo['mu'][0][0]
        self.m1 = float(1-self.mu)
        self.m2 = self.mu
        self.period_halo = (halo['te'][0,0]*u.s).to('yr')
        self.t_halo = (halo['t'][:,0]*u.s).to('yr')
        self.r_halo = (halo['state'][:,0:3]*u.km).to('AU')
        self.v_halo = (halo['state'][:,3:6]*u.km/u.s).to('AU/yr')

        # create interpolant for position (years & AU units)
        self.r_halo_interp = interpolate.interp1d(self.t_halo.value,
                self.r_halo.value.T, kind='linear')
        # create interpolant for orbital velocity (years & AU/yr units)
        self.v_halo_interp = interpolate.interp1d(self.t_halo.value,
                self.v_halo.value.T, kind='linear')
                
        # orbital properties used in Circular Restricted 3 Body Problem
        self.L2_dist = (halo['x_lpoint'][0][0]*u.km).to('AU')
        self.r_halo_L2 = (halo['state'][:,0:3]*u.km).to('AU')
        # position wrt L2
        self.r_halo_L2[:,0] -= self.L2_dist
        
        # create new interpolant for CR3BP (years & AU units)
        self.r_halo_interp_L2 = interpolate.interp1d(self.t_halo.value,
                self.r_halo_L2.value.T, kind='linear')

        #update outspec with unique elements
        self._outspec['equinox'] = self.equinox.value[0]
        self._outspec['orbit_datapath'] = orbit_datapath


    def orbit(self, currentTime, eclip=False):
        """Finds observatory orbit positions vector in heliocentric equatorial (default)
        or ecliptic frame for current time (MJD).

        This method returns the telescope L2 Halo orbit position vector.

        Args:
            currentTime (astropy Time array):
                Current absolute mission time in MJD
            eclip (boolean):
                Boolean used to switch to heliocentric ecliptic frame. Defaults to
                False, corresponding to heliocentric equatorial frame.

        Returns:
            astropy Quantity nx3 array:
                Observatory orbit positions vector in heliocentric equatorial (default)
                or ecliptic frame in units of AU

        Note: Use eclip=True to get ecliptic coordinates.

        """

        # get the orbit in rotating CR3BP frame (rel EM barycenter)
        t0 = self.haloStartTime

        # find time from Earth equinox and interpolated position
        dt = (currentTime - self.equinox + t0).to("yr").value
        t_halo = dt % self.period_halo
        r_halo = self.r_halo_interp(t_halo)
        
        # get heliocentric ecliptic moon positions
        r_Moon = (
            self.solarSystem_body_position(currentTime, "Moon", eclip=True)
            .to("AU")
            .value
        )

        # get heliocentric ecliptic earth positions
        r_Earth = (
            self.solarSystem_body_position(currentTime, "Earth", eclip=True)
            .to("AU")
            .value
        )
        r_Earth_norm = np.linalg.norm(r_Earth[:, 0:2], axis=1)
        lon_Earth = np.sign(r_Earth[:, 1]) * np.arccos(r_Earth[:, 0] / r_Earth_norm)
        
        # Moon rel Earth
        r_MoonEarth = r_Moon - r_Earth
        r_MoonEarth_norm = np.linalg.norm(r_MoonEarth[:, 0:2], axis=1)
        lon_MoonEarth = np.sign(r_MoonEarth[:, 1]) * np.arccos(r_MoonEarth[:, 0] / r_MoonEarth_norm)
        
        r_obs1 = (
            np.array(
                [
                    np.dot(self.rot(-lon_MoonEarth[x], 3), r_halo[x, :])
                    for x in range(currentTime.size)
                ]
            )
            * u.AU
        )
        
        # convert to earth centric (P to I: omega, I, Omega)
        # TODO: translate matlab into python
        # TODO: get equation for omega
        # TODO: finish applying 3-1-3 to r_halo
        hs = cross(rs,vs);      %specific angular momentum vector
        h2 = sum(hs.^2);        %specific angular momentum mag squared
        h = sqrt(h2);           %specific angular momentum mag
    
        # inclination
        sinI = sqrt(hs(1,:).^2 + hs(2,:).^2)./h;
        cosI = hs(3,:)./h;
        I = atan2(sinI,cosI);

        # longitude of ascending node
        Omega = mod(atan2(hs(1,:),-hs(2,:)),2*pi);
        
        
        r_halo = (
            np.array(
                [
                    np.dot(self.rot(-lon[x], 3), r_halo[x, :])
                    for x in range(currentTime.size)
                ]
            )
            * u.AU
        )
        
        # define relative to the sun
        r_earth = self.solarSystem_body_position(currentTime, "Earth")
        
        # convert to heliocentric
        
        


        # find Earth positions in heliocentric ecliptic frame
        r_Earth = (
            self.solarSystem_body_position(currentTime, "Earth", eclip=True)
            .to("AU")
            .value
        )
        
        # adding Earth-Sun distances (projected in ecliptic plane)
        r_halo = r_halo + r_Earth
        
        # Earth ecliptic longitudes
        lon = np.sign(r_Earth[:, 1]) * np.arccos(r_Earth[:, 0] / r_Earth_norm)
        
        # observatory positions vector in heliocentric ecliptic frame
        r_obs = (
            np.array(
                [
                    np.dot(self.rot(-lon[x], 3), r_halo[x, :])
                    for x in range(currentTime.size)
                ]
            )
            * u.AU
        )

        assert np.all(
            np.isfinite(r_obs)
        ), "Observatory positions vector r_obs has infinite value."

        if not eclip:
            # observatory positions vector in heliocentric equatorial frame
            r_obs = self.eclip2equat(r_obs, currentTime)

        return r_obs


    def equationsOfMotion_CRTBP(self, t, state):
        """Equations of motion of the CRTBP with Solar Radiation Pressure

        Equations of motion for the Circular Restricted Three Body
        Problem (CRTBP). First order form of the equations for integration,
        returns 3 velocities and 3 accelerations in (x,y,z) rotating frame.
        All parameters are normalized so that time = 2*pi sidereal year.
        Distances are normalized to 1AU. Coordinates are taken in a rotating
        frame centered at the center of mass of the two primary bodies. Pitch
        angle of the starshade with respect to the Sun is assumed to be 60
        degrees, meaning the 1/2 of the starshade cross sectional area is
        always facing the Sun on average

        Args:
            t (float):
                Times in normalized units
            state (float 6xn array):
                State vector consisting of stacked position and velocity vectors
                in normalized units

        Returns:
            float 6xn array:
                First derivative of the state vector consisting of stacked
                velocity and acceleration vectors in normalized units
        """

        mu = self.mu
        m1 = self.m1
        m2 = self.m2

        # conversions from SI to normalized units in CRTBP
        TU = (2.0 * np.pi) / (1.0 * u.yr).to("s")  # time unit
        DU = (1.0 * u.AU).to("m")  # distance unit
        MU = 5.97e24 * (1.0 + 1.0 / 81.0) * u.kg / self.mu  # mass unit = m1+m2

        x, y, z, dx, dy, dz = state

        rM1 = np.array([[-m2, 0, 0]])  # position of M1 rel 0
        rS_M1 = np.array([x, y, z]) - rM1.T  # position of starshade rel M1
        u1 = rS_M1 / np.linalg.norm(rS_M1, axis=0)  # radial unit vector along sun-line
        u2 = np.array([u1[1, :], -u1[0, :], np.zeros(len(u1.T))])
        u2 = u2 / np.linalg.norm(u2, axis=0)  # tangential unit vector to starshade

        Fsrp = np.zeros(u1.shape)

        if self.SRP:
            # pre-defined constants for a non-perfectly reflecting surface
            P = (
                (4.473 * u.uN / u.m**2.0).to("kg/(m*s**2)") * DU / TU**2.0 / MU
            )  # solar radiation pressure at L2
            A = np.pi * (36.0 * u.m) ** 2.0  # starshade cross-sectional area

            Bf = (
                self.non_lambertian_coefficient_front
            )  # non-Lambertian coefficient (front)
            Bb = (
                self.non_lambertian_coefficient_back
            )  # non-Lambertian coefficient (back)
            s = self.specular_reflection_factor  # specular reflection factor
            p = self.nreflection_coefficient  # nreflection coefficient
            ef = self.emission_coefficient_front  # emission coefficient (front)
            eb = self.emission_coefficient_back  # emission coefficient (back)

            # optical coefficients
            b1 = 0.5 * (1.0 - s * p)
            b2 = s * p
            b3 = 0.5 * (
                Bf * (1.0 - s) * p + (1.0 - p) * (ef * Bf - eb * Bb) / (ef + eb)
            )

            Fsrp_R = (
                0.25 * P * A * (b1 + 0.25 * b2 + 0.5 * b3)
            )  # radial component assuming 0.5*A
            Fsrp_T = (
                (np.sqrt(3) * 0.25) * P * A * (b2 + 2.0 * b3)
            )  # tangential component assuming 0.5*A

            Fsrp = Fsrp_R.value * u1 + Fsrp_T.value * u2  # total SRP force

        # occulter distance from each of the two other bodies
        r1 = np.sqrt((x + mu) ** 2.0 + y**2.0 + z**2.0)
        r2 = np.sqrt((1.0 - mu - x) ** 2.0 + y**2.0 + z**2.0)

        # equations of motion
        ds1 = (
            x + 2.0 * dy + m1 * (-mu - x) / r1**3.0 + m2 * (1.0 - mu - x) / r2**3.0
        )
        ds2 = y - 2.0 * dx - m1 * y / r1**3.0 - m2 * y / r2**3.0
        ds3 = -m1 * z / r1**3.0 - m2 * z / r2**3.0

        dr = [dx, dy, dz]
        ddr = [ds1 + Fsrp[0], ds2 + Fsrp[1], ds3 + Fsrp[2]]
        ds = np.vstack([dr, ddr])

        return ds


    def lookVectors(self, TL, N1, N2, tA, tB):
        """Finds star angular separations relative to the halo orbit positions

        This method returns the angular separation relative to the telescope on its
        halo orbit in the rotating frame of the CRTBP problem.

        Args:
            TL (TargetList module):
                TargetList class object
            N1 (integer):
                Integer index of the most recently observed star
            N2 (integer):
                Integer index of the next star of interest
            tA (astropy Time):
                Current absolute mission time in MJD
            tB (astropy Time array):
                Time at which next star observation begins in MJD

        Returns:
            tuple:
                float:
                    Angular separation between two target stars
                float 3 array:
                    Unit vector point from telescope to star 1
                float 3 array:
                    Unit vector point from telescope to star 2
                float 3 array:
                    Position of telescope
        """

        t = np.linspace(tA.value, tB.value, 2)  # discretizing time
        t = Time(t, format="mjd")  # converting time to modified julian date

        # position of telescope at the given times in rotating frame
        r_halo = self.haloPosition(t).to("au")
        r_tscp = (r_halo + np.array([1, 0, 0]) * self.L2_dist).value

        # position of stars wrt to telescope
        star1 = self.eclip2rot(TL, N1, tA).value
        star2 = self.eclip2rot(TL, N2, tB).value

        star1_tscp = star1 - r_tscp[0]
        star2_tscp = star2 - r_tscp[-1]

        # corresponding unit vectors pointing tscp -> Target Star
        u1 = star1_tscp / np.linalg.norm(star1_tscp)
        u2 = star2_tscp / np.linalg.norm(star2_tscp)

        angle = (np.arccos(np.dot(u1[0], u2[0].T)) * u.rad).to("deg")

        return angle, u1, u2, r_tscp

    def eclip2rot(self, TL, sInd, currentTime):
        """Rotates star position vectors from ecliptic to rotating frame in CRTBP

        This method returns a star's position vector in the rotating frame of
        the Circular Restricted Three Body Problem.

        Args:
            TL (TargetList module):
                TargetList class object
            sInd (integer):
                Integer index of the star of interest
            currentTime (astropy Time):
                Current absolute mission time in MJD

        Returns:
            astropy Quantity 1x3 array:
                Star position vector in rotating frame in units of AU
        """

        star_pos = TL.starprop(sInd, currentTime).to("au")
        theta = (
            (np.mod(currentTime.value, self.equinox.value[0]) * u.d).to("yr")
            / u.yr
            * (2.0 * np.pi)
            * u.rad
        )

        if currentTime.size == 1:
            star_rot = (
                np.array(
                    [
                        np.dot(self.rot(theta, 3), star_pos[x, :].to("AU").value)
                        for x in range(len(star_pos))
                    ]
                )[0]
                * u.AU
            )
        else:
            star_rot = (
                np.array(
                    [
                        np.dot(self.rot(theta[x], 3), star_pos[x, :].to("AU").value)
                        for x in range(len(star_pos))
                    ]
                )
                * u.AU
            )

        return star_rot

    def rot2eclip(self, pos, currentTime):
        """Rotates position vectors from ecliptic to rotating frame in EM CRTBP

        This method returns a star's position vector in the rotating frame of
        the Circular Restricted Three Body Problem.

        Args:
            TL (TargetList module):
                TargetList class object
            sInd (integer):
                Integer index of the star of interest
            currentTime (astropy Time):
                Current absolute mission time in MJD

        Returns:
            astropy Quantity 1x3 array:
                Star position vector in rotating frame in units of AU
        """

        theta = -(
            (np.mod(currentTime.value, self.equinox.value[0]) * u.d)
            / u.d
            * (2.0 * np.pi)
            * u.rad
        )

        if currentTime.size == 1:
            pos_rot = (
                np.array(
                    [
                        np.dot(self.rot(theta, 3), pos[x, :].to("AU").value)
                        for x in range(len(pos))
                    ]
                )[0]
                * u.AU
            )
        else:
            pos_rot = (
                np.array(
                    [
                        np.dot(self.rot(theta[x], 3), pos[x, :].to("AU").value)
                        for x in range(len(pos))
                    ]
                )
                * u.AU
            )

        return pos_rot


    def distForces(self, TL, sInd, currentTime):
        """Finds lateral and axial disturbance forces on an occulter

        Args:
            TL (:ref:`TargetList`):
                TargetList class object
            sInd (int):
                Integer index of the star of interest
            currentTime (~astropy.time.Time):
                Current absolute mission time in MJD

        Returns:
            tuple:
                :obj:`~astropy.units.Quantity`:
                    dF_lateral: Lateral disturbance force in units of N
                :obj:`~astropy.units.Quantity`:
                    dF_axial: Axial disturbance force in units of N

        """

        # get spacecraft position vector
        r_obs = self.orbit(currentTime)[0]
        # sun -> earth position vector
        r_Es = self.solarSystem_body_position(currentTime, "Earth")[0]
        # sun -> moon position vector
        r_Ms = self.solarSystem_body_position(currentTime, "Moon")[0]
        # Telescope -> target vector and unit vector
        r_targ = TL.starprop(sInd, currentTime)[0] - r_obs
        u_targ = r_targ.to("AU").value / np.linalg.norm(r_targ.to("AU").value)
        # sun -> occulter vector
        r_Os = r_obs.to("AU") + self.occulterSep.to("AU") * u_targ
        # Earth -> spacecraft vectors
        r_TE = r_obs - r_Es
        r_OE = r_Os - r_Es
        # Moon -> spacecraft vectors
        r_TM = r_obs - r_Ms
        r_OM = r_Os - r_Ms
        # force on occulter
        Mfactor = -self.scMass * const.M_earth * const.G
        F_EO = (
            r_OE
            / (np.linalg.norm(r_OE.to("AU").value) * r_OE.unit) ** 3.0
            * Mfactor)
        F_MO = (
            r_OM
            / (np.linalg.norm(r_OM.to("AU").value) * r_OM.unit) ** 3.0
            * Mfactor
            / (1/.0123000383))
        F_O = F_EO + F_MO
        # force on telescope
        Mfactor = -self.coMass * const.M_earth * const.G
        F_ET = (
            r_TE
            / (np.linalg.norm(r_TE.to("AU").value) * r_TE.unit) ** 3.0
            * Mfactor)
        F_MT = (
            r_TM
            / (np.linalg.norm(r_TM.to("AU").value) * r_TM.unit) ** 3.0
            * Mfactor
            / (1/.0123000383))
        F_T = F_ET + F_MT
        # differential forces
        dF = F_O - F_T * self.scMass / self.coMass
        dF_axial = (dF.dot(u_targ)).to("N")
        dF_lateral = (dF - dF_axial * u_targ).to("N")
        dF_lateral = np.linalg.norm(dF_lateral.to("N").value) * dF_lateral.unit
        dF_axial = np.abs(dF_axial)

        return dF_lateral, dF_axial

# =============================================================================
# Unit conversions
# =============================================================================

    # converting times
    def convertTime_to_canonical(self,dimTime):
        """Convert array of times from dimensional units to canonical units
        
        Method converts the times inside the array from the given dimensional
        unit (doesn't matter which, it converts to units of days in an
        intermediate step) into canonical units of the CR3BP. 1 day = 2 pi TU
        where TU are the canonical time units.
        
        Args:
            dimTime (float n array):
                Array of times in some time unit

        Returns:
            canonicalTime (float n array):
                Array of times in canonical units
        """
        
        dimTime = dimTime.to('day')
        canonicalTime = dimTime.value * (2*np.pi)
        
        return canonicalTime

    def convertTime_to_dim(self,canonicalTime):
        """Convert array of times from canonical units to unit of years
        
        Method converts the times inside the array from canonical units of the
        CR3BP into year units. 1 day = 2 pi TU where TU are the canonical time
        units.
        
        Args:
            canonicalTime (float n array):
                Array of times in canonical units

        Returns:
            dimTime (float n array):
                Array of times in units of years
        """
        
        canonicalTime = canonicalTime / (2*np.pi)
        dimTime = canonicalTime * u.day
        dimTime = dimTime.to('yr')
        
        return dimTime

    # converting distances
    def convertPos_to_canonical(self,dimPos):
        """Convert array of positions from dimensional units to canonical units
        
        Method converts the positions inside the array from the given dimensional
        unit (doesn't matter which, it converts to units of AU in an
        intermediate step) into canonical units of the CR3BP. (3.844000E+5*u.km).to('m') = 1 DU
        where DU are the canonical position units.
        
        Args:
            dimPos (float n array):
                Array of positions in some distance unit

        Returns:
            canonicalPos (float n array):
                Array of distance in canonical units
        """
        
        dimPos = dimPos.to('m')
        DU2m = (3.844000E+5*u.km).to('m')
        canonicalPos = (dimPos/DU2m).value
        
        return canonicalPos
    
    def convertPos_to_dim(self,canonicalPos):
        """Convert array of positions from canonical units to dimensional units
        
        Method converts the positions inside the array from canonical units of
        the CR3BP into units of AU. (3.844000E+5*u.km).to('m') = 1 DU
        
        Args:
            canonicalPos (float n array):
                Array of distance in canonical units

        Returns:
            dimPos (float n array):
                Array of positions in units of AU
        """
        DU2m = (3.844000E+5*u.km).to('m')
        dimPos = canonicalPos * DU2m
        dimPos = dimPos.to('AU')
        
        return dimPos

    # converting velocity
    def convertVel_to_canonical(self,dimVel):
        """Convert array of velocities from dimensional units to canonical units
        
        Method converts the velocities inside the array from the given dimensional
        unit (doesn't matter which, it converts to units of AU/yr in an
        intermediate step) into canonical units of the CR3BP.
        
        Args:
            dimVel (float n array):
                Array of velocities in some speed unit

        Returns:
            canonicalVel (float n array):
                Array of velocities in canonical units
        """
        
        dimVel = dimVel.to('m/d')
        DU2m = (3.844000E+5*u.km).to('m')
        TU2d = 1*u.day
        canonicalVel = (dimVel/DU2m*TU2d).value / (2*np.pi)
        
        return canonicalVel

    def convertVel_to_dim(self,canonicalVel):
        """Convert array of velocities from canonical units to dimensional units
        
        Method converts the velocities inside the array from canonical units of
        the CR3BP into units of AU/yr.
        
        Args:
            canonicalVel (float n array):
                Array of velocities in canonical units

        Returns:
            dimVel (float n array):
                Array of velocities in units of AU/yr
        """
        
        DU2m = (3.844000E+5*u.km).to('m')
        TU2d = 1*u.day
        canonicalVel = canonicalVel * (2*np.pi)
        dimVel = canonicalVel * DU2m/TU2d
        dimVel = dimVel.to('AU/yr')
        
        return dimVel

    #converting angular velocity
    def convertAngVel_to_canonical(self,dimAngVel):
        """Convert array of angular velocities from dimensional units to canonical units
        
        Method converts the angular velocities inside the array from the given
        dimensional unit (doesn't matter which, it converts to units of rad/day
        in an intermediate step) into canonical units of the CR3BP.
        
        Args:
            dimAngVel (float n array):
                Array of angular velocities in some angular velocity unit

        Returns:
            canonicalAngVel (float n array):
                Array of angular velocities in canonical units
        """
        
        dimAngVel = dimAngVel.to('rad/day')
        canonicalAngVel = dimAngVel.value / (2*np.pi)

        return canonicalAngVel
    
    def convertAngVel_to_dim(self,canonicalAngVel):
        """Convert array of angular velocities from canonical units to dimensional units
        
        Method converts the angular velocities inside the array from canonical
        units of the CR3BP into units of rad/day.
        
        Args:
            canonicalAngVel (float n array):
                Array of angular velocities in canonical units

        Returns:
            dimAngVel (float n array):
                Array of angular velocities in units of rad/day
        """
        
        canonicalAngVel = canonicalAngVel * (2*np.pi)
        dimAngVel = canonicalAngVel * u.rad / u.day
        
        return dimAngVel
